[unixbench]
#测试次数,默认10, 实际测试中，unixbench部分测试用例只执行TIMES/3次
TIMES = 10

#指定并行数, 默认1
#unixbench进行多并行测试时，pipe测试项Error, 因此提供修复patch:scripts/patch.sh
PARALLEL = 8

#*************************************************************************		
[x11perf]
#采用unixbench框架执行x11perf(2d)

#TIMES默认为10，但在实际测试中，实际次数为1/3*TIMES
TIMES = 10

#*************************************************************************			
[glxgears]
#采用unixbench框架执行glxgears(3d),unixbench对glxgears进行了修改，所以
#需要重新编译，编译时，需要需要libX11和libGL的开发包

#TIMES默认为10，但在实际测试中，实际次数为1/3*TIMES
TIMES = 10

#*************************************************************************		
[pingpong]
#指定并行乒乓球赛场数, 默认64，128，256即执行128，256，512并行的线程数
GAMES = 64,128,256

#指定测试次数, 默认18
TIMES = 18

#*************************************************************************	
[stream]
#定义stream两种测试模式，default,custom
#@default,默认执行单并行测试
#@custom,指定并行数测试
TESTMODE = custom

#custom模式下，指定并行数,example:1,2,4,6,8,16,默认为1
PARALLEL = 1,5

#测试次数
TIMES = 10

#*************************************************************************	
[iozone]
#目前，框架只针对读、写、随机读、随机写进行测试，后期会根据需求进行添加

#定义iozone两种测试模式，speed, throughput
#@speed, 测试文件系统IO读写性能
#@throughput,IO吞吐量测试
TESTMODE = speed

#测试次数
TIMES = 5

#测试目录，默认为$LPT/tmp/testdir
TESTDIR = 

#测试分区， 如果DEVICES不为空时， 将挂载DEVICES到TESTDIR；如果DEVICES未格式化，将忽略此选项
DEVICES = 

#设定测试文件大小，默认10g。设置时一般考虑为内存的2倍
FILESIZE  = 10g

#设定block大小，默认是4k，最大支持16M(注意：block大小应为2的倍数）
BLOCKSIZE  = 4k 

#DIRECT IO， 默认关闭
DIRECTIO = False

#throughput模式下，并行类型：进程（process)或者线程（threads),默认为进程
PARALLEL_TYPE = process

#throughput模式下，并行数设置，example:1,2,4,8。默认为4
PARALLEL= 4

#*************************************************************************	

[bonnie]
#NOTE:目前框架只支持单并行的bonnie++, 由于工具本身的并行方式特殊，暂不进行处理， 如有需求，请单独执行...

#测试次数, 默认5次
TIMES = 5

#测试目录，默认为$LPT/tmp/testdir
TESTDIR = 

#测试分区， 如果DEVICES不为空时， 将挂载DEVICES到TESTDIR；如果DEVICES未格式化，将忽略此选项
DEVICES = 

#测试时，指定Memory大小。如果这个值为None,则会用全部的物理内存,单位默认B，可以指定k或m或g;
MEMORY = 

#测试文件大小, 如果设置的值大小大于 1GiB,bonnie++将分多个文件写数据, bonnie++允许每个
#文件的上限是 1GiB, 文件大小设置可以 g(GIB)指定用单位。默认为10g;如果FILESIZE < MEMORY *2
#那么，MEMORY=FILESIZE/2
FILESIZE = 10g

#测试读写块的大小, 默认8k
BLOCKSIZE = 8k

#下面参数适用于小文件的测试

#如果SWALL_FILES_NUM=0, 将skip小文件测试，如果FILES_NUM=None，将采用默认值16
SMALL_FILES_NUM = 30

#小文件大小设置,支持1k, 2k, 4k, 8k, 16k, 64k, 128k, 256k。默认值为1k
SMALL_FILE_SIZE = 1k

#指定小文件测试目录，如果指定小文件测试目录，小文件的测试将“轮转”于这些目录之间,默认为0
SMALL_FILES_DIRS = 0

#每次IO操作，都采用fsync同步到磁盘
NO_BUFFER = False

#采用DIRECT_IO
DIRECT_IO = False

#*************************************************************************
[dbench_fio]
#测试目录，默认为$LPT/tmp/testdir
TESTDIR = 

#测试分区， 如果DEVICES不为空时， 将挂载DEVICES到TESTDIR；如果DEVICES未格式化，将忽略此选项
DEVICES = 

#并行方式，process、threads,默认process
PARALLEL_TYPE = process

#并行数， 可以指定多个如：4，8，12，默认：4
PARALLEL = 4

#定义每次测试，运行时间， 单位:秒
RUNTIME = 300

#定义预热测试时间，必须低于RUNTIME，如果高于RUNTIME，将采用RUNTIME的1/5， 这部分测试数据不计入结果
WARNUPTIME = 120

#定义测试次数，默认5次
TIMES = 5

#*************************************************************************
[lmbench]

#设定lmbench测试次数，默认5次
TIMES = 5

#设定lmbench并行数，默认为1, 最大999
#If you are running on an MP machine and you want to try running
#multiple copies of lmbench in parallel, you can specify how many here.
#Using this option will make the benchmark run 100x slower (sorry).
#NOTE:  WARNING! This feature is experimental and many results are 
#        known to be incorrect or random!
PARALLEL = 1
#Note, 因lmbench运行多并行时，测试数据不完成，因此目前只支持parallel
#后期将对lmbench工具就行修复调整

# Job placement (for SMPs)
#Options to control job placement
#1) Allow scheduler to place jobs
#2) Assign each benchmark process with any attendent child processes
#   to its own processor
#3) Assign each benchmark process with any attendent child processes
#   to its own processor, except that it will be as far as possible
#   from other processes
#4) Assign each benchmark and attendent processes to their own
#   processors
#5) Assign each benchmark and attendent processes to their own
#   processors, except that they will be as far as possible from
#   each other and other processes
#6) Custom placement: you assign each benchmark process with attendent
#   child processes to processors
#7) Custom placement: you assign each benchmark and attendent
#   processes to processors
#Note: some benchmarks, such as bw_pipe, create attendent child
#processes for each benchmark process.  For example, bw_pipe
#needs a second process to send data down the pipe to be read
#by the benchmark process.  If you have three copies of the
#benchmark process running, then you actually have six processes;
#three attendent child processes sending data down the pipes and 
#three benchmark processes reading data and doing the measurements.

#Now, 我们将处理前5个调度方式：其中
#1=DEFAULT, 2=BALANCED, 3=BALANCED_SPREAD, 4=UNIQUE, 5=UNIQUE_SPREAD
LMBENCH_SCHED=DEFAULT

#指定测试内存大小，如果为空，lmbench会自动匹配适合的大小。 龙芯目前采用1000
TESTMEMORY = 

#status OUTPUT
OUTPUT= /dev/null


